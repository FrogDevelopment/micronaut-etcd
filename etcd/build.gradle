dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut.docs:micronaut-docs-asciidoc-config-props:$micronautDocsVersion"

    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-inject-java"
    implementation "io.etcd:jetcd-core:$jetcdVersion"

    compileOnly "io.micronaut.micrometer:micronaut-micrometer-core"
    compileOnly "io.micronaut:micronaut-management"

    testImplementation("org.spockframework:spock-core:${spockVersion}") {
        exclude module:'groovy-all'
    }
    testImplementation "io.micronaut.test:micronaut-test-spock:$micronautTestVersion"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut:micronaut-inject-java"
    testImplementation "org.testcontainers:spock:$spockTestConainersVersion"
    testImplementation "io.micronaut:micronaut-management"
}

tasks.withType(Test) {
    useJUnitPlatform()
}


task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}